//
//  UserState.swift
//  Chimp
//
//  Created by Maximilian Gravemeyer on 03.09.20.
//

import Foundation
import CoreData
import SwiftUI
class AuthState: ObservableObject {
    
    //ONLY in auth the flow is to DB first. Core data follows after (sign up/sign in first - then core data)
    //that also means user_uid will be generated by the backend (no need to send from here)

    // TODO: get variable from userdefaults
    @Published var loggedIn = false
    @Published var token = ""
    @Published var user_uid = ""
    func authUser(email: String, password: String, option: AuthOptions, authDetail:FetchedResults<AuthDetail>, viewContext: NSManagedObjectContext) {
        AuthService.instance.authUser(email: email, password: password, option: option) { (result) in
            switch result {
            case .success(let response):
                self.saveAuthDetail(result: response, authDetail: authDetail, viewContext: viewContext)
            case .failure(let error):
                print(error.localizedDescription) // maybe assign it to a state and display to user?
            }
        }
    }
    
    private func saveAuthDetail(result: [String: String], authDetail: FetchedResults<AuthDetail>, viewContext: NSManagedObjectContext){
        guard let token = result["token"], let user_uid = result["user_uid"] else {
            return
        }

        let newAuthDetail = AuthDetail(context: viewContext)
        newAuthDetail.token = token
        newAuthDetail.user_uid = user_uid
        CoreDataManager.instance.save(viewContext: viewContext) { (saved) in
            if(saved){
                DispatchQueue.main.async {
                    self.loggedIn = true
                    self.token = token
                    self.user_uid = user_uid
                }
            }
        }
        
    }
    
}
